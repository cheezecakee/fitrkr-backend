// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/login"

				if l := len("auth/login"); len(elem) >= l && elem[0:l] == "auth/login" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleLoginRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 'u': // Prefix: "user"

				if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "DELETE":
						s.handleDeleteUserRequest([0]string{}, elemIsEscaped, w, r)
					case "GET":
						s.handleGetUserByIDRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateUserRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleUpdateUserRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "DELETE,GET,POST,PUT")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "email/"

						if l := len("email/"); len(elem) >= l && elem[0:l] == "email/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "email"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetUserByEmailRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 's': // Prefix: "s"

						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "ettings"

							if l := len("ettings"); len(elem) >= l && elem[0:l] == "ettings" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetUserSettingsRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateUserSettingsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}

						case 't': // Prefix: "tats"

							if l := len("tats"); len(elem) >= l && elem[0:l] == "tats" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetUserStatsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/body"

								if l := len("/body"); len(elem) >= l && elem[0:l] == "/body" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handleUpdateUserBodyMetricsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

							}

						case 'u': // Prefix: "ubscription"

							if l := len("ubscription"); len(elem) >= l && elem[0:l] == "ubscription" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetUserSubscriptionRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "cancel"

									if l := len("cancel"); len(elem) >= l && elem[0:l] == "cancel" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PUT":
											s.handleCancelUserSubscriptionRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PUT")
										}

										return
									}

								case 'p': // Prefix: "p"

									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ayment"

										if l := len("ayment"); len(elem) >= l && elem[0:l] == "ayment" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "PUT":
												s.handleUpdateUserRecordPaymentRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "PUT")
											}

											return
										}

									case 'l': // Prefix: "lan"

										if l := len("lan"); len(elem) >= l && elem[0:l] == "lan" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "PUT":
												s.handleUpgradeUserPlanRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "PUT")
											}

											return
										}

									}

								case 't': // Prefix: "trial"

									if l := len("trial"); len(elem) >= l && elem[0:l] == "trial" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PUT":
											s.handleStartUserTrialRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PUT")
										}

										return
									}

								}

							}

						}

					case 'u': // Prefix: "username/"

						if l := len("username/"); len(elem) >= l && elem[0:l] == "username/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "username"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetUserByUsernameRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/login"

				if l := len("auth/login"); len(elem) >= l && elem[0:l] == "auth/login" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = LoginOperation
						r.summary = "Login"
						r.operationID = "login"
						r.pathPattern = "/auth/login"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'u': // Prefix: "user"

				if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "DELETE":
						r.name = DeleteUserOperation
						r.summary = "Delete user"
						r.operationID = "deleteUser"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					case "GET":
						r.name = GetUserByIDOperation
						r.summary = "Get user by ID"
						r.operationID = "getUserByID"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateUserOperation
						r.summary = "Create a new user account"
						r.operationID = "createUser"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = UpdateUserOperation
						r.summary = "Update user"
						r.operationID = "updateUser"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "email/"

						if l := len("email/"); len(elem) >= l && elem[0:l] == "email/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "email"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetUserByEmailOperation
								r.summary = "Get user by email"
								r.operationID = "getUserByEmail"
								r.pathPattern = "/user/email/{email}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					case 's': // Prefix: "s"

						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "ettings"

							if l := len("ettings"); len(elem) >= l && elem[0:l] == "ettings" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetUserSettingsOperation
									r.summary = "Get user settings"
									r.operationID = "getUserSettings"
									r.pathPattern = "/user/settings"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									r.name = UpdateUserSettingsOperation
									r.summary = "Update user settings"
									r.operationID = "updateUserSettings"
									r.pathPattern = "/user/settings"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 't': // Prefix: "tats"

							if l := len("tats"); len(elem) >= l && elem[0:l] == "tats" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = GetUserStatsOperation
									r.summary = "Get user stats"
									r.operationID = "getUserStats"
									r.pathPattern = "/user/stats"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/body"

								if l := len("/body"); len(elem) >= l && elem[0:l] == "/body" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = UpdateUserBodyMetricsOperation
										r.summary = "Update user body metrics"
										r.operationID = "updateUserBodyMetrics"
										r.pathPattern = "/user/stats/body"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'u': // Prefix: "ubscription"

							if l := len("ubscription"); len(elem) >= l && elem[0:l] == "ubscription" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = GetUserSubscriptionOperation
									r.summary = "Get user subscription"
									r.operationID = "getUserSubscription"
									r.pathPattern = "/user/subscription"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "cancel"

									if l := len("cancel"); len(elem) >= l && elem[0:l] == "cancel" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PUT":
											r.name = CancelUserSubscriptionOperation
											r.summary = "Cancel user subscription"
											r.operationID = "cancelUserSubscription"
											r.pathPattern = "/user/subscription/cancel"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'p': // Prefix: "p"

									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ayment"

										if l := len("ayment"); len(elem) >= l && elem[0:l] == "ayment" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "PUT":
												r.name = UpdateUserRecordPaymentOperation
												r.summary = "Update user record payment"
												r.operationID = "updateUserRecordPayment"
												r.pathPattern = "/user/subscription/payment"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									case 'l': // Prefix: "lan"

										if l := len("lan"); len(elem) >= l && elem[0:l] == "lan" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "PUT":
												r.name = UpgradeUserPlanOperation
												r.summary = "Upgrade user plan"
												r.operationID = "upgradeUserPlan"
												r.pathPattern = "/user/subscription/plan"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 't': // Prefix: "trial"

									if l := len("trial"); len(elem) >= l && elem[0:l] == "trial" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PUT":
											r.name = StartUserTrialOperation
											r.summary = "Start user trial"
											r.operationID = "startUserTrial"
											r.pathPattern = "/user/subscription/trial"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					case 'u': // Prefix: "username/"

						if l := len("username/"); len(elem) >= l && elem[0:l] == "username/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "username"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetUserByUsernameOperation
								r.summary = "Get user by username"
								r.operationID = "getUserByUsername"
								r.pathPattern = "/user/username/{username}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			}

		}
	}
	return r, false
}
